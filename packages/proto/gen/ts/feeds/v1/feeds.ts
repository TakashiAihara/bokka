// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: feeds/v1/feeds.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../google/protobuf/timestamp";
import { messageTypeRegistry } from "../../typeRegistry";

export enum FeedType {
  UNSPECIFIED = 0,
  RSS = 1,
  ATOM = 2,
  UNRECOGNIZED = -1,
}

export enum FeedStatus {
  UNSPECIFIED = 0,
  ACTIVE = 1,
  ERROR = 2,
  INACTIVE = 3,
  UNRECOGNIZED = -1,
}

export interface Feed {
  $type: "feeds.v1.Feed";
  readonly id: string;
  readonly url: string;
  readonly title: string;
  readonly description?: string | undefined;
  readonly tags: readonly FeedTag[];
  readonly createdAt: Date | undefined;
  readonly updatedAt: Date | undefined;
  readonly userId: string;
  readonly type: FeedType;
  readonly status: FeedStatus;
}

export interface FeedTag {
  $type: "feeds.v1.FeedTag";
  readonly id: string;
  readonly name: string;
  readonly userId: string;
  readonly createdAt: Date | undefined;
  readonly updatedAt: Date | undefined;
}

export interface GetFeedRequest {
  $type: "feeds.v1.GetFeedRequest";
  readonly id: string;
}

export interface ListFeedsRequest {
  $type: "feeds.v1.ListFeedsRequest";
  readonly pageSize: number;
  readonly pageToken: string;
  readonly tagIds: readonly string[];
  readonly userId: string;
  readonly type: FeedType;
  readonly status: FeedStatus;
}

export interface ListFeedsResponse {
  $type: "feeds.v1.ListFeedsResponse";
  readonly feeds: readonly Feed[];
  readonly nextPageToken: string;
  readonly totalCount: number;
}

export interface CreateFeedRequest {
  $type: "feeds.v1.CreateFeedRequest";
  readonly url: string;
  readonly title: string;
  readonly description?: string | undefined;
  readonly tagIds: readonly string[];
  readonly userId: string;
}

function createBaseFeed(): Feed {
  return {
    $type: "feeds.v1.Feed",
    id: "",
    url: "",
    title: "",
    description: undefined,
    tags: [],
    createdAt: undefined,
    updatedAt: undefined,
    userId: "",
    type: 0,
    status: 0,
  };
}

export const Feed: MessageFns<Feed, "feeds.v1.Feed"> = {
  $type: "feeds.v1.Feed" as const,

  encode(message: Feed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(34).string(message.description);
    }
    for (const v of message.tags) {
      FeedTag.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(58).fork()).join();
    }
    if (message.userId !== "") {
      writer.uint32(66).string(message.userId);
    }
    if (message.type !== 0) {
      writer.uint32(72).int32(message.type);
    }
    if (message.status !== 0) {
      writer.uint32(80).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Feed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeed() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tags.push(FeedTag.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Feed>): Feed {
    return Feed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Feed>): Feed {
    const message = createBaseFeed() as any;
    message.id = object.id ?? "";
    message.url = object.url ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? undefined;
    message.tags = object.tags?.map((e) => FeedTag.fromPartial(e)) || [];
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.userId = object.userId ?? "";
    message.type = object.type ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

messageTypeRegistry.set(Feed.$type, Feed);

function createBaseFeedTag(): FeedTag {
  return { $type: "feeds.v1.FeedTag", id: "", name: "", userId: "", createdAt: undefined, updatedAt: undefined };
}

export const FeedTag: MessageFns<FeedTag, "feeds.v1.FeedTag"> = {
  $type: "feeds.v1.FeedTag" as const,

  encode(message: FeedTag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeedTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedTag() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<FeedTag>): FeedTag {
    return FeedTag.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeedTag>): FeedTag {
    const message = createBaseFeedTag() as any;
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.userId = object.userId ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FeedTag.$type, FeedTag);

function createBaseGetFeedRequest(): GetFeedRequest {
  return { $type: "feeds.v1.GetFeedRequest", id: "" };
}

export const GetFeedRequest: MessageFns<GetFeedRequest, "feeds.v1.GetFeedRequest"> = {
  $type: "feeds.v1.GetFeedRequest" as const,

  encode(message: GetFeedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeedRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetFeedRequest>): GetFeedRequest {
    return GetFeedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFeedRequest>): GetFeedRequest {
    const message = createBaseGetFeedRequest() as any;
    message.id = object.id ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetFeedRequest.$type, GetFeedRequest);

function createBaseListFeedsRequest(): ListFeedsRequest {
  return { $type: "feeds.v1.ListFeedsRequest", pageSize: 0, pageToken: "", tagIds: [], userId: "", type: 0, status: 0 };
}

export const ListFeedsRequest: MessageFns<ListFeedsRequest, "feeds.v1.ListFeedsRequest"> = {
  $type: "feeds.v1.ListFeedsRequest" as const,

  encode(message: ListFeedsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    for (const v of message.tagIds) {
      writer.uint32(26).string(v!);
    }
    if (message.userId !== "") {
      writer.uint32(34).string(message.userId);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeedsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeedsRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tagIds.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListFeedsRequest>): ListFeedsRequest {
    return ListFeedsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeedsRequest>): ListFeedsRequest {
    const message = createBaseListFeedsRequest() as any;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.tagIds = object.tagIds?.map((e) => e) || [];
    message.userId = object.userId ?? "";
    message.type = object.type ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

messageTypeRegistry.set(ListFeedsRequest.$type, ListFeedsRequest);

function createBaseListFeedsResponse(): ListFeedsResponse {
  return { $type: "feeds.v1.ListFeedsResponse", feeds: [], nextPageToken: "", totalCount: 0 };
}

export const ListFeedsResponse: MessageFns<ListFeedsResponse, "feeds.v1.ListFeedsResponse"> = {
  $type: "feeds.v1.ListFeedsResponse" as const,

  encode(message: ListFeedsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.feeds) {
      Feed.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalCount !== 0) {
      writer.uint32(24).int32(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeedsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeedsResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.feeds.push(Feed.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListFeedsResponse>): ListFeedsResponse {
    return ListFeedsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeedsResponse>): ListFeedsResponse {
    const message = createBaseListFeedsResponse() as any;
    message.feeds = object.feeds?.map((e) => Feed.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalCount = object.totalCount ?? 0;
    return message;
  },
};

messageTypeRegistry.set(ListFeedsResponse.$type, ListFeedsResponse);

function createBaseCreateFeedRequest(): CreateFeedRequest {
  return { $type: "feeds.v1.CreateFeedRequest", url: "", title: "", description: undefined, tagIds: [], userId: "" };
}

export const CreateFeedRequest: MessageFns<CreateFeedRequest, "feeds.v1.CreateFeedRequest"> = {
  $type: "feeds.v1.CreateFeedRequest" as const,

  encode(message: CreateFeedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.tagIds) {
      writer.uint32(34).string(v!);
    }
    if (message.userId !== "") {
      writer.uint32(42).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFeedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFeedRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tagIds.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateFeedRequest>): CreateFeedRequest {
    return CreateFeedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFeedRequest>): CreateFeedRequest {
    const message = createBaseCreateFeedRequest() as any;
    message.url = object.url ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? undefined;
    message.tagIds = object.tagIds?.map((e) => e) || [];
    message.userId = object.userId ?? "";
    return message;
  },
};

messageTypeRegistry.set(CreateFeedRequest.$type, CreateFeedRequest);

export interface FeedServiceImplementation<CallContextExt = {}> {
  getFeed(request: GetFeedRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Feed>>;
  listFeeds(request: ListFeedsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListFeedsResponse>>;
  createFeed(request: CreateFeedRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Feed>>;
}

export interface FeedServiceClient<CallOptionsExt = {}> {
  getFeed(request: DeepPartial<GetFeedRequest>, options?: CallOptions & CallOptionsExt): Promise<Feed>;
  listFeeds(request: DeepPartial<ListFeedsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListFeedsResponse>;
  createFeed(request: DeepPartial<CreateFeedRequest>, options?: CallOptions & CallOptionsExt): Promise<Feed>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
