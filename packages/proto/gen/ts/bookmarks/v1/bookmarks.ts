// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: bookmarks/v1/bookmarks.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../google/protobuf/timestamp";
import { messageTypeRegistry } from "../../typeRegistry";

export interface BookmarkTag {
  $type: "bookmarks.v1.BookmarkTag";
  readonly id: string;
  readonly name: string;
  readonly userId: string;
  readonly createdAt: Date | undefined;
  readonly updatedAt: Date | undefined;
}

export interface Bookmark {
  $type: "bookmarks.v1.Bookmark";
  readonly id: string;
  readonly url: string;
  readonly title: string;
  readonly description?:
    | string
    | undefined;
  /** Stringから型付きの配列に変更 */
  readonly tags: readonly BookmarkTag[];
  readonly createdAt: Date | undefined;
  readonly updatedAt: Date | undefined;
  readonly userId: string;
}

export interface GetBookmarkRequest {
  $type: "bookmarks.v1.GetBookmarkRequest";
  readonly id: string;
}

export interface ListBookmarksRequest {
  $type: "bookmarks.v1.ListBookmarksRequest";
  readonly pageSize: number;
  readonly pageToken: string;
  /** tag_idsに名前変更 */
  readonly tagIds: readonly string[];
  readonly userId: string;
}

export interface ListBookmarksResponse {
  $type: "bookmarks.v1.ListBookmarksResponse";
  readonly bookmarks: readonly Bookmark[];
  readonly nextPageToken: string;
  readonly totalCount: number;
}

export interface CreateBookmarkRequest {
  $type: "bookmarks.v1.CreateBookmarkRequest";
  readonly url: string;
  readonly title: string;
  readonly description?:
    | string
    | undefined;
  /** tag_idsに名前変更 */
  readonly tagIds: readonly string[];
  readonly userId: string;
}

function createBaseBookmarkTag(): BookmarkTag {
  return {
    $type: "bookmarks.v1.BookmarkTag",
    id: "",
    name: "",
    userId: "",
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const BookmarkTag: MessageFns<BookmarkTag, "bookmarks.v1.BookmarkTag"> = {
  $type: "bookmarks.v1.BookmarkTag" as const,

  encode(message: BookmarkTag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BookmarkTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookmarkTag() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BookmarkTag>): BookmarkTag {
    return BookmarkTag.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BookmarkTag>): BookmarkTag {
    const message = createBaseBookmarkTag() as any;
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.userId = object.userId ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(BookmarkTag.$type, BookmarkTag);

function createBaseBookmark(): Bookmark {
  return {
    $type: "bookmarks.v1.Bookmark",
    id: "",
    url: "",
    title: "",
    description: undefined,
    tags: [],
    createdAt: undefined,
    updatedAt: undefined,
    userId: "",
  };
}

export const Bookmark: MessageFns<Bookmark, "bookmarks.v1.Bookmark"> = {
  $type: "bookmarks.v1.Bookmark" as const,

  encode(message: Bookmark, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(34).string(message.description);
    }
    for (const v of message.tags) {
      BookmarkTag.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(58).fork()).join();
    }
    if (message.userId !== "") {
      writer.uint32(66).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Bookmark {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookmark() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tags.push(BookmarkTag.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Bookmark>): Bookmark {
    return Bookmark.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Bookmark>): Bookmark {
    const message = createBaseBookmark() as any;
    message.id = object.id ?? "";
    message.url = object.url ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? undefined;
    message.tags = object.tags?.map((e) => BookmarkTag.fromPartial(e)) || [];
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.userId = object.userId ?? "";
    return message;
  },
};

messageTypeRegistry.set(Bookmark.$type, Bookmark);

function createBaseGetBookmarkRequest(): GetBookmarkRequest {
  return { $type: "bookmarks.v1.GetBookmarkRequest", id: "" };
}

export const GetBookmarkRequest: MessageFns<GetBookmarkRequest, "bookmarks.v1.GetBookmarkRequest"> = {
  $type: "bookmarks.v1.GetBookmarkRequest" as const,

  encode(message: GetBookmarkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBookmarkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBookmarkRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetBookmarkRequest>): GetBookmarkRequest {
    return GetBookmarkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBookmarkRequest>): GetBookmarkRequest {
    const message = createBaseGetBookmarkRequest() as any;
    message.id = object.id ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetBookmarkRequest.$type, GetBookmarkRequest);

function createBaseListBookmarksRequest(): ListBookmarksRequest {
  return { $type: "bookmarks.v1.ListBookmarksRequest", pageSize: 0, pageToken: "", tagIds: [], userId: "" };
}

export const ListBookmarksRequest: MessageFns<ListBookmarksRequest, "bookmarks.v1.ListBookmarksRequest"> = {
  $type: "bookmarks.v1.ListBookmarksRequest" as const,

  encode(message: ListBookmarksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    for (const v of message.tagIds) {
      writer.uint32(26).string(v!);
    }
    if (message.userId !== "") {
      writer.uint32(34).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBookmarksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBookmarksRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tagIds.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListBookmarksRequest>): ListBookmarksRequest {
    return ListBookmarksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBookmarksRequest>): ListBookmarksRequest {
    const message = createBaseListBookmarksRequest() as any;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.tagIds = object.tagIds?.map((e) => e) || [];
    message.userId = object.userId ?? "";
    return message;
  },
};

messageTypeRegistry.set(ListBookmarksRequest.$type, ListBookmarksRequest);

function createBaseListBookmarksResponse(): ListBookmarksResponse {
  return { $type: "bookmarks.v1.ListBookmarksResponse", bookmarks: [], nextPageToken: "", totalCount: 0 };
}

export const ListBookmarksResponse: MessageFns<ListBookmarksResponse, "bookmarks.v1.ListBookmarksResponse"> = {
  $type: "bookmarks.v1.ListBookmarksResponse" as const,

  encode(message: ListBookmarksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.bookmarks) {
      Bookmark.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalCount !== 0) {
      writer.uint32(24).int32(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBookmarksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBookmarksResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bookmarks.push(Bookmark.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListBookmarksResponse>): ListBookmarksResponse {
    return ListBookmarksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBookmarksResponse>): ListBookmarksResponse {
    const message = createBaseListBookmarksResponse() as any;
    message.bookmarks = object.bookmarks?.map((e) => Bookmark.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalCount = object.totalCount ?? 0;
    return message;
  },
};

messageTypeRegistry.set(ListBookmarksResponse.$type, ListBookmarksResponse);

function createBaseCreateBookmarkRequest(): CreateBookmarkRequest {
  return {
    $type: "bookmarks.v1.CreateBookmarkRequest",
    url: "",
    title: "",
    description: undefined,
    tagIds: [],
    userId: "",
  };
}

export const CreateBookmarkRequest: MessageFns<CreateBookmarkRequest, "bookmarks.v1.CreateBookmarkRequest"> = {
  $type: "bookmarks.v1.CreateBookmarkRequest" as const,

  encode(message: CreateBookmarkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.tagIds) {
      writer.uint32(34).string(v!);
    }
    if (message.userId !== "") {
      writer.uint32(42).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBookmarkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBookmarkRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tagIds.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateBookmarkRequest>): CreateBookmarkRequest {
    return CreateBookmarkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBookmarkRequest>): CreateBookmarkRequest {
    const message = createBaseCreateBookmarkRequest() as any;
    message.url = object.url ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? undefined;
    message.tagIds = object.tagIds?.map((e) => e) || [];
    message.userId = object.userId ?? "";
    return message;
  },
};

messageTypeRegistry.set(CreateBookmarkRequest.$type, CreateBookmarkRequest);

export interface BookmarkServiceImplementation<CallContextExt = {}> {
  getBookmark(request: GetBookmarkRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Bookmark>>;
  listBookmarks(
    request: ListBookmarksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBookmarksResponse>>;
  createBookmark(request: CreateBookmarkRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Bookmark>>;
}

export interface BookmarkServiceClient<CallOptionsExt = {}> {
  getBookmark(request: DeepPartial<GetBookmarkRequest>, options?: CallOptions & CallOptionsExt): Promise<Bookmark>;
  listBookmarks(
    request: DeepPartial<ListBookmarksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBookmarksResponse>;
  createBookmark(
    request: DeepPartial<CreateBookmarkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Bookmark>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
